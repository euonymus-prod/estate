type Mutation {
  mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business
    @cypher(
      statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
    )
}

type Query {
  searchContract(
    minMonthlyFee: Int = 0,
    maxMonthlyFee: Int = 9999999,
    minSize: Int = 0,
    maxSize: Int = 9999,
    directions: [String] = ["北", "南", "西", "東", "北東", "北西", "南東", "南西"],
    layouts: [String] = ["ワンルーム", "1K", "1DK", "1LDK", "2K", "2DK", "2LDK", "3K", "3DK", "3LDK", "4K", "4DK", "4LDK", "5K以上"],
    stationCode: Int = 9999999,
    distance: Float = 9999999
  ): [ApartmentContract] @cypher(statement: """
MATCH (contract:ApartmentContract)-[r:IS_NEWEST_CONTRACT_OF]->(apartment)-[r2:IS_ARRANGED]->(room_layout)
WITH contract, apartment, room_layout
MATCH (apartment)-[r3:IS_A_PART_OF]->(building)-[r4:IS_NEAR_FROM]->(station)
WITH contract, apartment, room_layout, building, station, r4
OPTIONAL MATCH (contract)-[r5:REQUIRES_MONTHLY_FEE]->(montly_fee)
WITH sum(
	CASE montly_fee.payment_unit
	WHEN 'exact' THEN
	     CASE
		WHEN montly_fee.tax_included THEN r5.amount
		ELSE r5.amount * 1.1
	     END
	WHEN 'relative' THEN
	     CASE
		WHEN montly_fee.tax_included THEN contract.decrared_rental_fee * r5.amount
		ELSE contract.decrared_rental_fee * r5.amount * 1.1
	     END
        WHEN 'relative_to_full' THEN
	     CASE
		WHEN montly_fee.tax_included THEN (contract.decrared_rental_fee + contract.management_fee + contract.common_service_fee) * r5.amount
		ELSE (contract.decrared_rental_fee + contract.management_fee + contract.common_service_fee) * r5.amount
	     END
	END
    ) + (contract.decrared_rental_fee + contract.management_fee + contract.common_service_fee) AS monthly_fee,
    contract, apartment, room_layout, building, station, r4
WHERE
    monthly_fee >= $minMonthlyFee and
    monthly_fee <= $maxMonthlyFee and
    apartment.size >= $minSize and
    apartment.size <= $maxSize and
    apartment.mainly_facing_direction in $directions and
    room_layout.room_layout in $layouts and
    ($stationCode = 9999999 OR station.station_cd = $stationCode) and
    r4.distance <= $distance
RETURN
    contract,
    apartment,
    station,
    room_layout,
    building
  """)
  userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
  ratingsCount: [RatingCount]
    @cypher(
      statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
    )
}

